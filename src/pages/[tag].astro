---
import { SEO } from "astro-seo";
import type { CollectionEntry } from "astro:content";
import PostPreview from "src/components/PostPreview/PostPreview.astro";
import PostPreviewGrid from "src/components/PostPreview/PostPreviewGrid.astro";
import ScrollingHero from "src/components/ScrollingHero";
import GutterLayout from "src/layouts/GutterLayout.astro";
import MainLayout from "src/layouts/MainLayout.astro";
import { getPublishedPosts } from "src/util";

export async function getStaticPaths() {
  let tags = new Set();

  await getPublishedPosts().then((posts) =>
    posts.map(({ data }) =>
      data.tags.map((tag) => {
        tags.add(tag);
      })
    )
  );

  const posts = await getPublishedPosts();

  interface TagGroup {
    tag: string;
    posts: CollectionEntry<"posts">[];
  }

  const tagGroups = posts.reduce<TagGroup[]>((tagGroup, post) => {
    // there's probably a cool one-liner that could replace this.  one day...
    post.data.tags.forEach((tag) => {
      const idx = tagGroup.findIndex((group) => group.tag === tag);
      if (idx !== -1) {
        tagGroup[idx].posts.push(post);
      } else {
        tagGroup.push({
          tag,
          posts: [post],
        });
      }
    });

    return tagGroup;
  }, []);

  return tagGroups.map(({ tag, posts }) => ({
    params: { tag: tag.toLowerCase() },
    props: { posts, tag: tag.toLowerCase() },
  }));
}

interface Props {
  posts: CollectionEntry<"posts">[];
  tag: string;
}

const { posts, tag } = Astro.props;
---

<head>
  <SEO
    title={`${tag.charAt(0).toUpperCase() + tag.substring(1)} | The Brew Guide`}
    description={`Posts tagged with ${tag} from The Brew Guide to up your coffee and espresso game at home.`}
  />
</head>

<MainLayout>
  <ScrollingHero client:load label={tag} />
  <GutterLayout>
    <PostPreviewGrid>
      {posts.map((post) => <PostPreview post={post} />)}
    </PostPreviewGrid>
  </GutterLayout>
</MainLayout>
